# -*- coding: utf-8 -*-
"""scrapy_with_selenium_banghyunmin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zTMWu4Pa8PMMvlWKPEz_W4G_JX0F1sWQ

# 5. 셀레니움 활용 웹브라우저 자동화
"""

## freeze 할때는 이 코드를 써서 안쓰는 패키지를 잘못 freeze 하지 않게 조심하기

# #설치 되어있는 패키지만을 freeze
# import sys, pkg_resources
# # 현재 메모리에 로드된 모듈 이름 목록을 리스트로 저장
# # sys.modules는 실행 중에 동적으로 import된 모듈까지 포함
# mods = list(sys.modules)
# # import된 패키지들의 (이름, 버전) 튜플을 저장할 리스트
# pkgs = []
# # 설치된 모든 패키지 정보 가져오기
# dists = list(pkg_resources.working_set)

# # 설치된 패키지 중 현재 import된 것만 골라서 pkgs에 추가
# for i in range(0, len(dists)):
#     name = dists[i].project_name
#     key = dists[i].key
#     if name in mods or key in mods:
#         pkgs.append((name, dists[i].version))

# # requirements.txt 파일로 저장
# with open('requirements.txt', 'w') as f:
#     for i in range(0, len(pkgs)):
#         f.write(f"{pkgs[i][0]}=={pkgs[i][1]}\n")

# for i in range(0, len(dists)):
#     name = dists[i].project_name
#     key = dists[i].key
#     if name in mods or key in mods:
#         pkgs.append((name, dists[i].version))

# # requirements.txt 파일로 저장
# with open('requirements.txt', 'w') as f:
#     for i in range(0, len(pkgs)):
#         f.write(f"{pkgs[i][0]}=={pkgs[i][1]}\n")

# print("requirements.txt 생성 완료")



"""### 라이브러리 선언"""

import pandas as pd
from datetime import datetime
from sqlalchemy import create_engine, inspect
# Selenium과 webdriver-manager를 사용한 Chrome 브라우저 실행 코드
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import bs4

"""### 크롬브라우저 옵션 설정"""

# WebDriver 설치 및 브라우저 실행 설정
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # ★★★헤드리스 모드로 실행 (브라우저 창을 표시하지 않음)
options.add_argument("window-size=1920x1080") # 헤드리스 모드로 실행 (명시적으로 표기)
options.add_argument("--no-sandbox")  # 샌드박스 모드 비활성화 (가상 환경에서 안정적인 실행을 위해)
options.add_argument("--disable-dev-shm-usage")  # /dev/shm 사용 비활성화 (메모리 부족 방지)
options.add_argument("--disable-gpu")  # GPU 가속 비활성화 (필요시 사용)
options.add_argument("start-maximized")  # 브라우저 창 최대화
options.add_argument("disable-infobars")  # 정보 표시줄 비활성화
options.add_argument("--disable-extensions")  # 브라우저 확장 프로그램 비활성화
options.add_argument('--ignore-certificate-errors') # 통신 키 제거

# user-agent 값 설정
user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
options.add_argument(f"user-agent={user_agent}")

# WebDriver로 Chrome 브라우저 실행
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
# 웹페이지 파싱 될때까지 최대 3초 기다림
driver.implicitly_wait(3)

"""### 1. 스파크 퀴즈 정보 수집"""

try:
    targetUrl = "https://sparkkorea.com/"
    driver.get( targetUrl )
    driver.current_url
    driver.save_screenshot("./here.jpg")
    ### 1. 원하는 액션대상 요소 탐색
    quizXpath = '//*[@id="menu-item-382"]/a'
    quizMenuEle = driver.find_element(By.XPATH, quizXpath)
    ### 2. 액션대상 요소 클릭
    quizMenuEle.click()

    ### 3. 페이지 소스 불러오기
    htmlObj = driver.page_source
    bsObj = bs4.BeautifulSoup(htmlObj, "html.parser")

    ### 4. 퀴즈정보 수집
    sparkQuizDiv = bsObj.find(name = "div", attrs={"class":"class_spark_quiz"})
    aLinks = sparkQuizDiv.find_all(name="a")
    linkList = []
    nameList = []
    for i in range(0, len(aLinks)):
        eachAtag = aLinks[i]
        nameList.append( eachAtag.text )
        linkList.append( eachAtag.attrs["href"] )
    quizDf = pd.DataFrame( zip (nameList, linkList), columns = ["링크명","링크주소"] )
    quizDf
except Exception as e:
    print(e)

"""### 2. 데이터베이스 저장"""

now = datetime.now()
time_key = now.strftime("%Y_%m_%d_%H_%M_%S")
quizDf["TIME_KEY"] = time_key

quizDf.columns = ["LINK_NAME","LINK_ADDR","TIME_KEY"]

# MySQL 데이터베이스 연결 정보 설정 (ngrok)
### 5. DB에 저장하기
### - IP: my8003.gabiadb.com
### - 포트: 3306
### - DB명: hkcodedb
### - 계정: hkcode / fintech1308!
user = 'hkcode'
password = 'fintech1308!'
host = 'my8003.gabiadb.com'
port = '3306'
database = 'hkcodedb'

# SQLAlchemy 엔진 생성
engineMy = create_engine(f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}')
# 데이터프레임을 MySQL 데이터베이스의 테이블에 저장
# indata.to_sql(name="ngrok_test", con=engineMy, if_exists='replace', index=False)

try:
    tableName = "service_hkcode_0407"
    quizDf.to_sql(name= tableName,index=False, if_exists="append", con=engineMy)
    print("DB이관 완료")
except Exception as e:
    print(e)

# import sys, pkg_resources

# # 현재 메모리에 로드된 모듈 이름 목록을 리스트로 저장
# # sys.modules는 실행 중에 동적으로 import된 모듈까지 포함
# # 예: pandas 하나만 import했더라도 내부적으로 numpy, dateutil 등 여러 모듈을 import해서 메모리 올림
# mods = list(sys.modules)

# # import된 패키지들의 (이름, 버전) 튜플을 저장할 리스트
# pkgs = []

# # 설치된 모든 패키지 정보 가져오기
# dists = list(pkg_resources.working_set)

# # 설치된 패키지 중 현재 import된 것만 골라서 pkgs에 추가
# for i in range(0, len(dists)):
#     name = dists[i].project_name
#     key = dists[i].key
#     if name in mods or key in mods:
#         pkgs.append((name, dists[i].version))

# # requirements.txt 파일로 저장
# with open('requirements.txt', 'w') as f:
#     for i in range(0, len(pkgs)):
#         f.write(f"{pkgs[i][0]}=={pkgs[i][1]}\n")

# print("requirements.txt 생성 완료")

import os
import ast

def find_imports_in_file(filepath):
    with open(filepath, 'r', encoding='utf-8') as file:
        node = ast.parse(file.read(), filename=filepath)
    imports = set()
    for n in ast.walk(node):
        if isinstance(n, ast.Import):
            for alias in n.names:
                imports.add(alias.name.split('.')[0])
        elif isinstance(n, ast.ImportFrom):
            if n.module is not None:
                imports.add(n.module.split('.')[0])
    return imports

def find_imports_in_project(root_dir):
    all_imports = set()
    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                all_imports.update(find_imports_in_file(filepath))
    return all_imports

# 사용 예시: 현재 폴더 기준
if __name__ == "__main__":
    imports = find_imports_in_project('.')
    print("이 프로젝트에서 import한 패키지 목록:")
    for imp in sorted(imports):
        print(imp)

